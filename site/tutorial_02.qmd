---
title: "Database support"
format: html
editor: visual
---

One of the main tasks of Hal9 is to enable users to quickly and easily create applications and conduct analysis on databases. When we have the data stored in csv files we can follow a similar approach to what was covered in the preceding tutorial to analyze it, but what happens if we have combined databases hosted in a cloud environment? or if we want to extract data from an application such as Pilot or Notion, create combined databases and analyze them in Hal9?

Hal9 currently does not provide direct support for fetching data from external applications; however, it does offer a direct method of parsing this type of data sing Postgres, which is what we will be covering in this tutorial.

### Connecting to a database warehouse using Hal9

Hal9 allows the users to connect and query a database in Postgres. Not only this, but it also gives you the necessary credentials to create your database in this data warehouse.

The steps to do it are:

-   Once you are logged in, you must go to settings and you will notice that the *Enable database support* option is not selected.

![](images/120.png)

-   When you select it, a *Create* button will appear, which when pressed will give you your Postgres credentials, as it is shown below.

![](images/121.png)

These credentials give you access to a database in Postgres, which you build by connecting it to other applications where you will extract data from using differents integration frameworks. In case you do not have a technical background, we recommend using [Bracket](https://www.usebracket.com/) for this step.

![](tutorial%2002/images/1.png)

[Bracket](https://docs.usebracket.com/introduction) is a fast, code-optional way to sync data between databases, data warehouses, and SaaS tools and enables you to set up limitlessly flexible one-way or two-way syncs between any pairing of database or SaaS tool. It support differents integrations, for example Google Sheets, Notion, Snowflake, and Postgres.

Once you are connected to your database, you can start to chat with your data!

### Important concepts

-   **Databases** are the systems used to store and manage digital information. These systems store data in an organized way and let users query it in order to extract important and relevant information. They are designed not only to store and manage data, but also to enable access and sharing of that information. They are used to store data for a variety of purposes, including recording transactions, managing inventory, supporting customer relationships, and making data-driven decisions.

-   A **data warehouse** is a centralized repository of organizational data, used to combine databases from multiple sources for reporting and analysis. Data warehouses can be used to store current, historical, and long-term data. They can be built using physical hardware or hosted in a cloud environment. Examples of data warehouses include Amazon Redshift, Google BigQuery, Microsoft Azure SQL Data Warehouse and PostgreSQL. Data warehouses are used to gain insights for improved decision making. Common use cases of data warehouses include sales analysis, marketing analysis, customer feedback analysis, product recommendation engines, fraud detection, resource planning, and forecasting.

The purpose of a database is to collect real-time information for immediate use and for an application's records. On the other hand, the data warehouse collects, stores, and analyzes large volumes of historical data, for the medium- and long-term. The warehouse is the database of databases, integrating different sources of information and creating a super business intelligence system in the process. This enables much more reliable long-term decision making by having access to more data.

-   An **integration framework** is a structure designed to make it easier to link up different applications, data sources, APIs, and services within an organization. It simplifies the exchange of data and components between different systems, databases, applications, and services, and allows them to interact with each other automatically. This reduces complexity and costs associated with integration across different systems. Integration frameworks also provide security and automation for the regular exchange of data, and help organizations ensure the accuracy and consistency of data across applications. Furthermore, they give organizations a unified view of their distributed systems, and the ability to quickly build and deploy new applications and services.
