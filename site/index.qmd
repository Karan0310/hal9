---
title: "Interactive Data Apps without Web Dev"
---

The `hal9` package provides a code-first WYSIWYG application [designer](#designer) and a set of application [components](#components) to build browser-based data applications. You can then publish these applications as static HTML files, or perform complex server-side operations in [code](#code) with Python and R.

```{r setup, include = FALSE}
knitr::opts_chunk$set(python.reticulate = FALSE)
```

## Installation

This package is under development and can only be installed from GitHub. The R package is close to being complete while development for the Python package is about to start.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
devtools::install_github("hal9ai/hal9ai", subdir = "r")
```

## Python

```{python, eval = FALSE}
!pip3 install --upgrade --force-reinstall git+https://github.com/hal9ai/hal9ai.git#subdirectory=python
```

:::

## Designer

The app designer allows you to compose data apps by dragging and customizing controls (dropdowns, buttons, sliders) and outputs (tables, charts, etc). You can launch the designer as follows.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)
h9_create()
```

## Python

```{python, eval = FALSE}
import hal9 as h9
h9.create()
```

:::

```{r, echo = FALSE}
#| echo: false

library(hal9)

h9_create(environment = "devel")
```

The designer is code-first, meaning, you can then export the data app definition by exporting the application from the "export" command. You can then check-in this code into source control to track and compare changes.

## Components

The designer generates code that defines controls (dropdowns, sliders, textboxes, etc.), visualizations (maps, tables, charts) and transformations (filters, sampling, add columns). You don't need to manually write this code, but you can if you choose to.

The following examples showcases an application filtering the iris dataset with a dropdown and a custom filter expression.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)

h9_create() |>
  h9_load(iris) |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_filter(field = "Species", expression = "field == outputs.dropdown") |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

## Python

```{python, eval = FALSE}
import hal9 as h9

h9.create()
  .load(iris)
  .dropdown(values = "versicolor,setosa,virginica")
  .filter(field = "Species", expression = "field == outputs.dropdown")
  .scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

:::

```{r, echo = FALSE}
library(hal9)

h9_create(environment = "devel") |>
  h9_load(iris) |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_filter(field = "Species", expression = "field == outputs.dropdown") |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

This second example makes use of the `rebind` parameter to bind controls to specific properties in subsequent components.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
h9_create() |>
  h9_load(dataset = iris) |>
  h9_slider(value = "70", max = "100") |>
  h9_sample(rebind = list(samplesize = "slider")) |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

## Python

```{python, eval = FALSE}
h9.create()
  .load(dataset = iris) |>
  .slider(value = "70", max = "100") |>
  .sample(rebind = { samplesize = "slider" }) |>
  .scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

:::


```{r}
#| echo: false

h9_create(environment = "devel") |>
  h9_load(dataset = iris) |>
  h9_slider(value = "70", max = "100") |>
  h9_sample(rebind = list(samplesize = "slider")) |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

## Code

We are adding support to perform complex Python and R based operations with server-side frameworks like [Bussin](https://bussin.ai), [Shiny](https://shiny.rstudio.com/) and [Streamlit](https://streamlit.io/).

::: {.panel-tabset}

## Bussin

```{r, eval = FALSE}
# client.R
library(hal9)
h9_create() |>
  h9_textbox(name = "contents") |>
  h9_html(name = "message")
```

```{r, eval = FALSE}
# server.R
library(bussin)

bs_textbox(on_update = function(value) {
  bs_set("message", paste0("<b>", bs_get("contents"), "</b>"))
})
```

```{r, eval = FALSE}
library(bussin)
bs_run("client.R", "server.R")
```

## Streamlit

```{python, eval = FALSE}
import streamlit as st

h9.create()
  .dropdown()
  .streamlit()
```

## Shiny

```{r, eval = FALSE}
# client.R
library(shiny)
```

```{r, eval = FALSE}
# server.R
library(shiny)
```

```{r, eval = FALSE}
library(shiny)
run("client.R", "server.R")
```

:::

Alternatevely, we have support for R, Python, Flask and Plumber in our cloud offering. [Contact us](info@hal9.ai) to help you get onboarded.

