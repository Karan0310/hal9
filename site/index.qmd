---
title: "Interactive Data Apps without Web Dev"
---

The `hal9` package provides a code-first WYSIWYG application [designer](#designer), a set of application [controls](#controls), an [events](#events) framework to build data applications, and a linbrary of [serverless](#serverless) transformations. You can then publish these applications as static HTML files, or perform complex event-based operations with Python and R.

```{r setup, include = FALSE}
knitr::opts_chunk$set(python.reticulate = FALSE)
```

## Installation

This package is under development and can only be installed from GitHub. The R package is close to being complete while development for the Python package is about to start.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
devtools::install_github("hal9ai/hal9ai", subdir = "r")
```

## Python

```{python, eval = FALSE}
!pip3 install --upgrade --force-reinstall git+https://github.com/hal9ai/hal9ai.git#subdirectory=python
```

:::

## Designer

The app designer allows you to compose data apps by dragging and customizing controls (dropdowns, buttons, sliders) and outputs (tables, charts, etc). You can launch the designer as follows.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)
h9_create()
```

## Python

```{python, eval = FALSE}
import hal9 as h9
h9.create()
```

:::

```{r, echo = FALSE}
#| echo: false

library(hal9)

h9_create(environment = "devel")
```

The designer is code-first, meaning, you can then export the data app definition by exporting the application from the "export" command. You can then check-in this code into source control to track and compare changes.

## Controls

The designer generates Python, R or HTML code that defines controls (dropdowns, sliders, textboxes, etc.) The following examples showcases a few controls generated by the designer.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)

h9_create() |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_slider(value = "70", max = "100") |>
  h9_number() |>
  h9_textbox() |>
  h9_file()
```

## Python

```{python, eval = FALSE}
import hal9 as h9

h9.create()
  .dropdown(values = "versicolor,setosa,virginica")
  .slider(value = "70", max = "100")
  .number()
  .textbox()
  .file()
```

:::

```{r, echo = FALSE}
library(hal9)

h9_create(environment = "devel") |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_slider(value = "70", max = "100") |>
  h9_number() |>
  h9_textbox() |>
  h9_file()
```

## Events

In order to run complex operation in Python and R you can make use of events (`on_update`, `on_select`, etc) with arbitrary transformations. You can use `h9_set` and `h9_get` to get and set global variables to pass data across events or set control values as well.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)
app <- h9_create()

h9_textbox(app, "contents", width = "100", on_update = function(value) {
  h9_set("message", paste0("Hello <b>", h9_get("contents"), "</b>"))
})

h9_html(app, name = "message", {
  h9_get("message")
})

h9_run(app)
```

```{r, eval = FALSE}
library(hal9)
app <- h9_create()

h9_textbox(app, "contents", on_update = function(value) {
  h9_set("message", paste0("Hello <b>", h9_get("contents"), "</b>"))
})

h9_html(app, name = "message", {
  h9_get("message")
})

h9_run(app)
```

## Python

```{r, eval = FALSE}
import hal9 as h9
app = h9.create()

app.textbox("contents", on_update = lambda h9.set("message", "Hello " + h9.get("contents")))

app.html(name = "message")

app.run()
```

:::

When using events, a server is required. Meaning, a computer needs to exist somewhere that can run Python and R code for your users since browsers do not support running Python nor R code natevely.

## Serverless

For simpler applications, you can make use of a library of visualizations (maps, tables, charts) and transformations (filters, sampling, add columns) that run directly in the browser and do not require a server at all.

The following examples showcases an application filtering the iris dataset with a dropdown and a custom filter expression running directly in the browser.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)

h9_create() |>
  h9_load(iris) |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_filter(field = "Species", expression = "field == outputs.dropdown") |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

## Python

```{python, eval = FALSE}
import hal9 as h9

h9.create()
  .load(iris)
  .dropdown(values = "versicolor,setosa,virginica")
  .filter(field = "Species", expression = "field == outputs.dropdown")
  .scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

:::

```{r, echo = FALSE}
library(hal9)

h9_create(environment = "devel") |>
  h9_load(iris) |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_filter(field = "Species", expression = "field == outputs.dropdown") |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

This second example makes use of the `rebind` parameter to bind controls to specific properties in subsequent components. Notice that dragging the slider is very responsive since this code runs entirely in the browser using JavaScript native technologies, it avoid using WASM which is not compatible with all browsers and requires significant bandwith not suitable for mobile usage.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
h9_create() |>
  h9_load(dataset = iris) |>
  h9_slider(value = "70", max = "100") |>
  h9_sample(rebind = list(samplesize = "slider")) |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

## Python

```{python, eval = FALSE}
h9.create()
  .load(dataset = iris) |>
  .slider(value = "70", max = "100") |>
  .sample(rebind = { samplesize = "slider" }) |>
  .scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

:::


```{r}
#| echo: false

h9_create(environment = "devel") |>
  h9_load(dataset = iris) |>
  h9_slider(value = "70", max = "100") |>
  h9_sample(rebind = list(samplesize = "slider")) |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```

