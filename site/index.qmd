---
title: "Interactive Data Apps without Web Dev"
---

The `hal9` package provides a code-first WYSIWYG application [designer](#designer), a set of application [controls](#controls), an [events](#events) framework to build data applications, and a linbrary of [serverless](#serverless) transformations. You can then publish these applications as static HTML files, or perform complex event-based operations with Python and R.

```{r setup, include = FALSE}
knitr::opts_chunk$set(python.reticulate = FALSE)
```

## Installation

This package is under development and can only be installed from GitHub. The R package is close to being complete while development for the Python package is about to start.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
devtools::install_github("hal9ai/hal9ai", subdir = "r")
```

## Python

```{python, eval = FALSE}
!pip3 install --upgrade --force-reinstall git+https://github.com/hal9ai/hal9ai.git#subdirectory=python
```

:::

## Designer

The app designer allows you to compose data apps by dragging and customizing controls (dropdowns, buttons, sliders) and outputs (tables, charts, etc). You can launch the designer as follows.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)
h9_create()
```

## Python

```{python, eval = FALSE}
import hal9 as h9
h9.create()
```

:::

```{r, echo = FALSE}
#| echo: false

library(hal9)

h9_create(environment = "devel")
```

The designer is code-first, meaning, you can then export the data app definition by exporting the application from the "export" command. You can then check-in this code into source control to track and compare changes.

## Controls

The designer generates Python, R or HTML code that defines controls (dropdowns, sliders, textboxes, etc.) The following examples showcases a few controls generated by the designer.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)

h9_create() |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_slider(value = "70", max = "100") |>
  h9_number() |>
  h9_textbox() |>
  h9_file()
```

## Python

```{python, eval = FALSE}
import hal9 as h9

h9.create()
  .dropdown(values = "versicolor,setosa,virginica")
  .slider(value = "70", max = "100")
  .number()
  .textbox()
  .file()
```

:::

```{r, echo = FALSE}
library(hal9)

h9_create(environment = "devel") |>
  h9_dropdown(values = "versicolor,setosa,virginica") |>
  h9_slider(value = "70", max = "100") |>
  h9_number() |>
  h9_textbox() |>
  h9_file()
```

## Events

In order to run complex operation in Python and R you can make use of events (`on_update`, `on_select`, etc) with arbitrary transformations. You can use `h9_set` and `h9_get` to get and set global variables to pass data across events or set control values as well.

::: {.panel-tabset}

## R

```{r, eval = FALSE}
library(hal9)
library(ggplot2)
library(plotly)

h9_slider("slider", on_update = function(value) {
  h9_set("slider_value", value)
})

h9_html(name = "scatterplot", {
  df <- iris |> slice_sample(prop = h9_get("slider_value")/100)
  file <- tempfile(fileext=".html")
  (ggplot(df, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()) |> ggplotly() |> partial_bundle() |> htmlwidgets::saveWidget(file, selfcontained=TRUE)
  paste(readLines(file), collapse="")
})

h9_run()
```

## Python

```{python, eval = FALSE}
import hal9 as h9
import pandas as pd
import statsmodels.api as sm
import plotly.express as px

iris = sm.datasets.get_rdataset("iris", "datasets", cache=True).data
h9.set("iris", pd.DataFrame(iris))

h9.slider("slider", on_update = lambda value: h9.set("slider_val", value))

def plotSample(value):
  df = h9.get("iris").sample(frac = value/100)
  fig = px.scatter(x= df["Sepal.Length"], y= df["Sepal.Width"], color= "species")
  return fig.to_html(full_html= False)

h9.html(name = "scatter plot", lambda : plotSample(h9.get("slider_val")))

h9.run()
```

:::

```{r}
#| echo: false

h9_create(environment = "devel") |>
  h9_load(dataset = iris) |>
  h9_slider(value = "70", max = "100") |>
  h9_sample(rebind = list(samplesize = "slider")) |>
  h9_scatter_chart(x = "Sepal.Length", y = "Sepal.Width", color = "Species")
```